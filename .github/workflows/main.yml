name: Jager CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  Setups:
    name: Setups
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          
      - name: Verify Go Installation
        run: go version

  DataserviceLint:
    name: DataserviceLint
    runs-on: ubuntu-latest
    needs: Setups
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Force Go to Use Vendor
        run: go env -w GOFLAGS="-mod=vendor"

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.64.8
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run golangci-lint for dataservice
        run: |
          cd dataservice
          golangci-lint run --modules-download-mode=vendor --timeout=5m --out-format=colored-line-number

  LogserviceLint:
    name: LogserviceLint
    runs-on: ubuntu-latest
    needs: Setups
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Force Go to Use Vendor
        run: go env -w GOFLAGS="-mod=vendor"

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.64.8
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run golangci-lint for logservice
        run: |
          cd logservice
          golangci-lint run --modules-download-mode=vendor --timeout=5m --out-format=colored-line-number

  Sonar:
    name: Sonarscan
    runs-on: ubuntu-latest
    needs: [DataserviceLint, LogserviceLint]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      - name: SonarQube Scan
        run: |
          echo "::add-mask::${{ secrets.SONAR_URL }}"
          sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=dataservice,logservice,web,loadbalancer \
            -Dsonar.go.coverage.reportPaths=coverage.out

  tests:
    name: Run Dataservice Tests
    runs-on: ubuntu-latest
    needs: Sonar
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Force Go to Use Vendor (if needed)
        run: go env -w GOFLAGS="-mod=vendor"

      - name: Run Unit Tests with Coverage (Dataservice)
        run: |
          cd dataservice
          go test -v ./... -coverprofile=coverage.out

      - name: Debug Coverage File
        run: ls -la dataservice

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: dataservice-coverage
          path: dataservice/coverage.out

  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to get the latest code
      - name: Checkout source code
        uses: actions/checkout@v2

      # Configure AWS credentials for interaction with ECR and ECS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build and Push web service image
      - name: Build and Push web image
        uses: appleboy/docker-ecr-action@master
        with:
            access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
            secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            registry: ${{ secrets.REGISTRY }}
            repo: ${{ secrets.ECR_REPOSITORY }}
            region: ${{ env.AWS_REGION }}
            tags: web,${{ github.run_number }}
            daemon_off: false
            dockerfile: ./Dockerfile-web
            context: ./

      # Build and Push db service image
      - name: Build and Push db image
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ secrets.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          tags: db,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile-db
          context: ./

      # Build and Push dataservice image
      - name: Build and Push dataservice image
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ secrets.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          tags: dataservice,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile-dataservice
          context: ./


      # Build and Push loadbalancer image
      - name: Build and Push loadbalancer image
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ secrets.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          tags: loadbalancer,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile-loadbalancer
          context: ./

      # Build and Push logservice image
      - name: Build and Push logservice image
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ secrets.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          tags: logservice,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile-logservice
          context: ./



      
      # # Install Docker Compose
      # - name: Install Docker Compose
      #   run: curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sh

      # # Setup Docker context to ECS and deploy with Docker Compose
      # - name: Docker Context
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_REGION: ${{ secrets.AWS_REGION }}
      #     ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      #   run: |
      #     docker context create ecs ecs-context --from-env
      #     docker --context ecs-context compose -f docker-compose.yaml up